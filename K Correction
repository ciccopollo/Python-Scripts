from numpy import *
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from astropy.io import ascii
import decimal
 
#Global 
centre=850
redshiftsize=3.5
redshiftbins=35
#Open SED
file1=ascii.read('m51sed')
#Wavelength and SED Flux columns
asedwave, aflux=file1['wave'], file1['flux']
sedwave, flux=np.array(asedwave), np.array(aflux)
#Want Wavelengths to have exactly two decimal places --> round
#Number of rows in SED file
sedrows=sedwave.shape[0]
#Create SED Matrix (Biggest One)
SED=np.zeros((sedrows,2))
#Fill Matrix with rounded wavelength values
#First column 1 and then column 2 
count=0
while (count<sedrows):
    SED[count][0]=round(float(sedwave[count]),2)
    count=count+1
 
count=0
while (count<sedrows):
    SED[count][1]=flux[count]
    count=count+1
 
#Want to create a matrix with all shifted wavelengths
#Open FILTER file
file2=ascii.read('850')
#Wavelength and Transmission columns
aoriginalwave, atrans=file2['wave'], file2['flux']
originalwave, trans=np.array(aoriginalwave), np.array(atrans)
 
#Number of rows
rows=originalwave.shape[0]
 
#Lowest filter value
lowest=originalwave[0]
 
#Array containing all redshifts bins/redshifts
 
dz=float(redshiftsize/redshiftbins)
bins=arange(0, redshiftsize+dz, dz)
 
FILTER=np.zeros((rows,2))
 
#Array containing SED*TRANSMISSION results
 
RESULT=np.zeros((rows,4))
 
#Get maximum and minimum values for all redshifts
 
#----------------- LOOP TO COMPUTE ALL REDSHIFTS (ADD LATER) -----------------
 
#i can go from 0 to redshiftbins
         
for z in range(redshiftbins):
  #Central Wavelength change
  newcentre=centre/(1+bins[z])
  diff=centre-newcentre
  #Lowest filter's value shifts 
  newlowest=round(float(lowest-diff),2)
  #Create a matrix that contains redshifted wavelengths, but with same Transmission
  #First: Modified Wavelengths
  count2=0
  while (count2<rows):
    FILTER[count2][0]=newlowest+count2*0.01
    count2=count2+1
  #Second: Trasmission Function
  count2=0
  while (count2<rows):
    FILTER[count2][1]=trans[count2]
    count2=count2+1 
  #Find the first value from the FILTER matrix inside the SED matrix
  if FILTER[0][0] < 0:#When values in the filter file are negative we have a problem
    negative=1     
    while negative < rows: #Skip first value and go to the next one until find a positive one
      if FILTER[negative][0] < 0:
    negative=negative+1
      else:
    break
   
    ncount=negative
 
    while ncount < rows:
      for first in range(sedrows):
    fsed=round(float(SED[first][0]),2)
    ffilter=round(float(FILTER[ncount][0]),2)
    zero=round(float(fsed-ffilter),2)
    if zero == 0:
      break
      if zero == 0:
    break
      else:
    ncount=ncount+1
   
  elif FILTER[0][0] >=0 and FILTER[0][0] < SED[0][0]:
      notnegative=1
      while notnegative < rows:
          if FILTER[notnegative][0] < SED[0][0]:
              notnegative=notnegative+1
          else:
              break
       
      notnegativecount=notnegative  
     
      while notnegativecount < rows:
        for first in range(sedrows):
            fsed=round(float(SED[first][0]),2)
            ffilter=round(float(FILTER[notnegativecount][0]),2)
            zero=round(float(fsed-ffilter),2)
            if zero == 0:
                break
        if zero == 0:
            break
        else:
            notnegativecount=notnegativecount+1
     
  else:
    for first in range(sedrows):
      fsed=round(float(SED[first][0]),2)
      ffilter=round(float(FILTER[0][0]),2)
      zero=round(float(fsed-ffilter),2)
      if zero == 0:
    break
 
 
  common=0 #counter for both RESULT and FILTER (if the first value in the filter file is not negative)
  fsum=0 #total flux (sum of all TRANSMISSION*FILTER values)
 
 
  #ASCII FILE
  #results=open('results.txt', 'w')
  #results.write("#wavesed trans flux total\n\n") 
   
  if FILTER[0][0] < 0: #Skip the first n negative values
               #IMPORTANT: when first value of FILTER matrix is negative, then we know SED[ncount][0]=FILTER[0][0]
   
    negativecounter=ncount
    common=0
    while negativecounter < rows:
   
      RESULT[common][0]=SED[common][0] #wavelength column from SED
      RESULT[common][1]=FILTER[negativecounter][1] #transmission value
      RESULT[common][2]=SED[common][1] #SED value
      RESULT[common][3]=FILTER[negativecounter][1]*SED[common][1] #SED*TRANSMISSION
      #result="{0}, {1}, {2}, {3}".format(RESULT[common][0], RESULT[common][1], RESULT[common][2], RESULT[common][3])
      #results.write(result+'\n')
      fsum=fsum+RESULT[common][3]
      negativecounter=negativecounter+1
      common=common+1
 
    # results.close()
    print(fsum)
 
  elif FILTER[0][0] >= 0 and FILTER[0][0] < SED[0][0]:
     
    middlecounter=notnegativecount
    common=0
    while middlecounter < rows:
   
      RESULT[common][0]=SED[common][0] #wavelength column from SED
      RESULT[common][1]=FILTER[middlecounter][1] #transmission value
      RESULT[common][2]=SED[common][1] #SED value
      RESULT[common][3]=FILTER[middlecounter][1]*SED[common][1] #SED*TRANSMISSION
      #result="{0}, {1}, {2}, {3}".format(RESULT[common][0], RESULT[common][1], RESULT[common][2], RESULT[common][3])
      #results.write(result+'\n')
      fsum=fsum+RESULT[common][3]
      middlecounter=middlecounter+1
      common=common+1
 
    #results.close()
    print(fsum)
     
  else:
   
    cfirst=first #first used as a counter
    #Add "rows" to "first" to find all the FILTER values inside the SED matrix
    positivetotal=first+rows
    #print(first, rows, positivetotal)
    while cfirst < positivetotal:
   
      RESULT[common][0]=SED[cfirst][0] #wavelength column from SED
      RESULT[common][1]=FILTER[common][1] #transmission value
      RESULT[common][2]=SED[cfirst][1] #SED value
      RESULT[common][3]=FILTER[common][1]*SED[cfirst][1] #SED*TRANSMISSION
      #result="{0}, {1}, {2}, {3}".format(RESULT[common][0], RESULT[common][1], RESULT[common][2], RESULT[common][3])
      #results.write(result+'\n')
      fsum=fsum+RESULT[common][3]
      cfirst=cfirst+1
      common=common+1
 
    #results.close()
    print(fsum)
     
  #ARRAY WITH ALL SUMS
  
